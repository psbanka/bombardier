.. _faq-general:

FAQ: General
============

Why does this project exist?
----------------------------

Bombardier grew from a company that provided key-control products to Real Estate Agents (these are in the form of little boxes that hang on people's doors when they want to sell their houses and keys that all Real Estate Agents hold to access the key housed in the little box). One of the features of these key-control products was that it was possible to get information about what boxes a given Real-estate agent opened. In addition, it was possible to turn off a key quickly so that a Real Estate Agent who was not longer in good standing couldn't open the boxes and gain access to the houses being sold.

To facilitate some of these features, the key-control products required a datacenter back-end which communicated with the keys to find out and report what boxes were opened and which could authorize keys to access key-boxes for the next day. In addition, there were a large variety of other network-based software services: web-based portals, interactive voice-response, TCP-based socket servers, client-server applications fronted by VPN components; as well as numerous infrastructure components to make everything work: DNS, email, load balancing, and database backend. 

Because this datacenter infrastructure was part of a product that provided people with access to a large number of homes in various geographic areas, it was critical that the datacenter infrastructure be deployed properly each and every time to large numbers of servers. Furthermore, there was a large software development group which was constantly releasing improvements and patches to the backend software, and so this datacenter had to be able to accomodate change quickly as well.

Bombardier was developed to manage this infrastructure: to get a concrete idea of what software was being deployed on what servers in a single `Definitive Software Library`_ , to centralize all software `Configuration Items`_, and to be able to deploy software correctly every time. Implementing Bombardier in this environment decreased the `Incidents`_ to the `Service Desk`_ by 90% and increased speed of deployment by 90%.

After the success of the team in managing software releases in the Real Estate field, the same IT team was assigned in 2006 to a new product which dealt with identifying and tracking any tampering to shipping containers coming into and out of the United States. This product also had a substantial back-end datacenter with even higher security requirements. We tried to find any products that were at all similar to the Bombardier that could be used instead of writing our own software, but could find nothing that came close. Therefore Bombardier was extended and enhanced, providing it with much more of a Linux focus, a streamlined command-line interface, locked-down security protocols, and other features. All these features rolled into the 0.70 release, which was released to open source under the GPLv2 license.

This venture was audited by several large companies, including undergoing a successful abbreviated ISO 17799 audit by Siemens CERT, which deemed that the system "...provides an appropriate and acceptable level of IT security."

Since then, the software has been used on other products within the company, gradually becoming more secure, more modular, and easier to use. 


.. _Definitive Software Library: http://en.wikipedia.org/wiki/Definitive_Software_Library
.. _Configuration Items: http://en.wikipedia.org/wiki/Configuration_item
.. _Incident: http://en.wikipedia.org/wiki/Incident_Management_%28ITSM%29
.. _Service Desk: http://en.wikipedia.org/wiki/Information_Technology_Infrastructure_Library#Service_Desk

What does "Bombardier" mean, and how do you pronounce it?
---------------------------------------------------------

One of the goals of Bombardier was to apply some concepts of Manufacturing Engineering to Software as a Service. On a factory line, every product has a `Bill of Materials`_, which "is a list of the raw materials, sub-assemblies, intermediate assemblies, sub-components, components, parts and the quantities of each needed to manufacture an end item." And we thought to ourselves, "Why should servers in a datacenter be any different? This software is just as critical to our customers as the widgets that they purchase, and yet we manage software deployment and changes in a much different way." We therefore had the belief that every server should have a Bill of Materials or "BOM." Hence, the name "Bombardier" comes from this term: it's the software that ensures that all servers comply with their BOMs.

Furthermore, many datacenter administrators treat their work like ground warfare: send in a platoon of system administrators to pore over each and every configuration option and setting within those systems to make sure they're correct. Whereas our viewpoint is that system administrators should hardly ever log on to an individual server, and should **never** make any changes to a server ad-hoc. All changes to servers should be done with packages so that the changes are well-documented and reversible. Therefore, managing a datacenter chagne using Bombardier is much more like strategic air-strikes: from a centralized console, pick your packages and deploy them to (usually large amounts of) servers, and sit back and watch things happen.

We're American English speakers, so we pronounce Bombardier as bom-buh-**DEER**. If you're a French feller and want to pronounce it bom-bahr-**DYEY**, then that's your problem.

There's also an `audio clip of the pronunciation`_.

.. _Bill of Materials: http://en.wikipedia.org/wiki/Bill_of_materials
.. _audio clip of the pronunciation: http://cache.lexico.com/dictionary/audio/lunaWAV/B04/B0477000.wav

Is Bombardier stable?
---------------------

Mostly. 

Does Django scale?
------------------

Yes. Compared to development time, hardware is cheap, and so Django is
designed to take advantage of as much hardware as you can throw at it.

Django uses a "shared-nothing" architecture, which means you can add hardware
at any level -- database servers, caching servers or Web/application servers.

The framework cleanly separates components such as its database layer and
application layer. And it ships with a simple-yet-powerful
:ref:`cache framework <topics-cache>`.

Who's behind this?
------------------

Django was originally developed at World Online, the Web department of a
newspaper in Lawrence, Kansas, USA. Django's now run by an international team of
volunteers; you can read all about them over at the :ref:`list of committers
<internals-committers>`

Which sites use Django?
-----------------------

The Django wiki features a consistently growing `list of Django-powered sites`_.
Feel free to add your Django-powered site to the list.

.. _list of Django-powered sites: http://code.djangoproject.com/wiki/DjangoPoweredSites

.. _mtv:

Django appears to be a MVC framework, but you call the Controller the "view", and the View the "template". How come you don't use the standard names?
-----------------------------------------------------------------------------------------------------------------------------------------------------

Well, the standard names are debatable.

In our interpretation of MVC, the "view" describes the data that gets presented
to the user. It's not necessarily *how* the data *looks*, but *which* data is
presented. The view describes *which data you see*, not *how you see it.* It's
a subtle distinction.

So, in our case, a "view" is the Python callback function for a particular URL,
because that callback function describes which data is presented.

Furthermore, it's sensible to separate content from presentation -- which is
where templates come in. In Django, a "view" describes which data is presented,
but a view normally delegates to a template, which describes *how* the data is
presented.

Where does the "controller" fit in, then? In Django's case, it's probably the
framework itself: the machinery that sends a request to the appropriate view,
according to the Django URL configuration.

If you're hungry for acronyms, you might say that Django is a "MTV" framework
-- that is, "model", "template", and "view." That breakdown makes much more
sense.

At the end of the day, of course, it comes down to getting stuff done. And,
regardless of how things are named, Django gets stuff done in a way that's most
logical to us.

<Framework X> does <feature Y> -- why doesn't Django?
-----------------------------------------------------

We're well aware that there are other awesome Web frameworks out there, and
we're not averse to borrowing ideas where appropriate. However, Django was
developed precisely because we were unhappy with the status quo, so please be
aware that "because <Framework X> does it" is not going to be sufficient reason
to add a given feature to Django.

Why did you write all of Django from scratch, instead of using other Python libraries?
--------------------------------------------------------------------------------------

When Django was originally written a couple of years ago, Adrian and Simon
spent quite a bit of time exploring the various Python Web frameworks
available.

In our opinion, none of them were completely up to snuff.

We're picky. You might even call us perfectionists. (With deadlines.)

Over time, we stumbled across open-source libraries that did things we'd
already implemented. It was reassuring to see other people solving similar
problems in similar ways, but it was too late to integrate outside code: We'd
already written, tested and implemented our own framework bits in several
production settings -- and our own code met our needs delightfully.

In most cases, however, we found that existing frameworks/tools inevitably had
some sort of fundamental, fatal flaw that made us squeamish. No tool fit our
philosophies 100%.

Like we said: We're picky.

We've documented our philosophies on the
:ref:`design philosophies page <misc-design-philosophies>`.

Is Django a content-management-system (CMS)?
--------------------------------------------

No, Django is not a CMS, or any sort of "turnkey product" in and of itself.
It's a Web framework; it's a programming tool that lets you build Web sites.

For example, it doesn't make much sense to compare Django to something like
Drupal_, because Django is something you use to *create* things like Drupal.

Of course, Django's automatic admin site is fantastic and timesaving -- but
the admin site is one module of Django the framework. Furthermore, although
Django has special conveniences for building "CMS-y" apps, that doesn't mean
it's not just as appropriate for building "non-CMS-y" apps (whatever that
means!).

.. _Drupal: http://drupal.org/

How can I download the Django documentation to read it offline?
---------------------------------------------------------------

The Django docs are available in the ``docs`` directory of each Django tarball
release. These docs are in ReST (ReStructured Text) format, and each text file
corresponds to a Web page on the official Django site.

Because the documentation is `stored in revision control`_, you can browse
documentation changes just like you can browse code changes.

Technically, the docs on Django's site are generated from the latest development
versions of those ReST documents, so the docs on the Django site may offer more
information than the docs that come with the latest Django release.

.. _stored in revision control: http://code.djangoproject.com/browser/django/trunk/docs

Where can I find Django developers for hire?
--------------------------------------------

Consult our `developers for hire page`_ for a list of Django developers who
would be happy to help you.

You might also be interested in posting a job to http://djangogigs.com/ .
If you want to find Django-capable people in your local area, try
http://djangopeople.net/ .

.. _developers for hire page: http://code.djangoproject.com/wiki/DevelopersForHire
