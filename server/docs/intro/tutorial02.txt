.. _intro-tutorial02:


====================================================
Deploying your first package with Bombardier, part 2
====================================================

Let's take an example where we'd like to create a package to manage
the SNMP configuration on a machine under our control.  This package
will work on a Redhat Enterprise Linux 5 server or a Centos 5 server.
If you don't have one of these available, you may have to modify this
package to fit your configuration.  The job of this package will be to
install and configure SNMP on a remote Redhat server

The core of the Bombardier system is the Bombardier Package.  First of
all, a package is defined by nothing more than a simple human-readable
text file which lists the binary (installable) files with a set of
instructions (scripts) that install, configure, verify, and uninstall
those binary files onto a given machine.

In our SNMP setup example, we'll start with a package configuration
file below::

  class_name: SnmpConfigV5.SnmpConfigV5
  injectors: {}
  libs:
    SnmpConfigV5: {
      svn: 'http://www.bombardierinstaller.org/svn/pkg/SnmpConfigV5'
    }
    YumPackageInstaller: {
      svn: 'http://www.bombardierinstaller.org/svn/pkg/YumPackageInstaller'
    }
  package-version: 5
  release: 3

The first step is to create this package definition on your Bombardier
server using the bombardier command-line interface:

  peacemaker (admin)> create package SnmpConfig

at which point, the CLI will open a vim editor screen and allow you to
paste in the configuration data shown above.  When you exit the
editor, the CLI will upload the package definition to the Bombardier
Server.

class_name, libs, and a skeleton package class
==============================================

In this example, there are two major sections that we will concern
ourselves with first: ``class_name`` and ``libs``.

A package has to have to have at least one ``libs`` section and must
specify one ``class_name`` entry.  In our example, this package
specified two ``libs`` entries: SnmpCofigV5 and YumPackageInstaller.
These are python libraries that will be shipped over to the machine
that is going to have this package installed on it.  The Python class
specified in class_name is going to be given control of the
installation process.

A skeleton Python class for a package must look like the
following::

  from bombardier_core.Spkg import SpkgV5
  from bombardier_core.static_data import OK

  class MiniPackage(SpkgV5):
      def __init__(self, config):
          SpkgV5.__init__(self, config)

      def configure(self):
          return OK

      def install(self):
      	  return OK

      def uninstall(self):
          return OK

      def verify(self):
          return OK

Every package must extend the SpkgV5 class, must take a ``config``
object in the constructor, and must define at least the public methods
shown above.  For more information about creating a Python Spkg
subclass, refer to ___.

Our example package is only slightly more complicated than this, and
can be viewed at this URL:
http://www.bombardierinstaller.org/svn/pkg/SnmpConfigV5/SnmpConfigV5.py


injectors
=========

Before we continue, a word about injectors.  Most packages need to
provide some kind of software to a machine as part of their
activities.  For example, you may want to deliver a website to a web
server, with all the .html, .jpg, .css, etc. files that such a site
would require.  Any and all files that you would like to bundle with
your package should be specified in the ``injectors`` section of the
package configuration file.

In our SNMP example, Redhat already provides the basic software for
SNMP utilities, so there is no need to bundle binary files along with
this package.  If you view the script for this package, you can see
that it uses the YumPackageInstaller library to install and verify
that the "net-snmp-utils" RPM is installed on the remote machine.

