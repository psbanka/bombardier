#!/usr/bin/env python

import syck, os, sys
GLOBAL_CONFIG_FILE = "/etc/bombardier.yml"

def checkConfig():
    if not os.path.isfile(GLOBAL_CONFIG_FILE):
        if os.path.isdir("deploy"):
            print "%% Error. The configuration file %s does not exist." % GLOBAL_CONFIG_FILE
            print "%% Please create it with at least the following"
            print "%% information:"
            print "---"
            print "serverHome: %s" % os.getcwd()
            print
            sys.exit(1)
        else:
            print "This looks like a new installation of Bombardier."
            result = ''
            prompt = "Perform initial environment setup? (Y/n): "
            while result == '':
                instr = raw_input(prompt)
                if len(instr) == 0:
                    break
                if instr.lower()[0] == 'y':
                    break
                elif instr.lower()[0] == 'n':
                    sys.exit(1)
            print "==> Making directories..."
            os.makedirs("deploy/client")
            os.makedirs("deploy/include")
            os.makedirs("deploy/bom")
            os.makedirs("deploy/packages")
            print "==> Making configuration file..."
            fh=open(GLOBAL_CONFIG_FILE, 'w')
            fh.write("---\n")
            fh.write("serverHome: %s\n" % os.getcwd())
            fh.close()
            os.system("chmod 600 %s" % GLOBAL_CONFIG_FILE)
    os.chdir(syck.load(open(GLOBAL_CONFIG_FILE).read()).get("serverHome"))

checkConfig()

import exceptions
import sys, os, readline, signal
import libUi
from commonUtil import *
from Slash import *
import optparse

mode.auth = USER

# READLINE CONFIGS
readline.parse_and_bind('tab: complete')
readline.parse_and_bind('C-z: "end\n"')
#readline.parse_and_bind('?: "\C-v?\t\d"')
readline.parse_and_bind('set bell-style none')
readline.set_completer_delims(' ')

if __name__ == "__main__":
    parser = optparse.OptionParser("usage: %prog -u user-name <bomsh-script>")
    parser.add_option("-u", "--user", dest="user", default=mode.username,
                      help="set the username associated with this session")
    (options, scripts) = parser.parse_args()
    if options.user:
        mode.username = options.user

    if scripts:
        status = OK
        filename = scripts[0]
        lines = open(filename, 'r').readlines()
        mode.batch = True
        for line in lines:
            cmdStatus, cmdOutput = slash.processCommand(line.strip())
            if status == OK:
                status = cmdStatus
        sys.exit(status)
    else:
        libUi.motd(mode.serverHome, slash.fpOut)
        if os.path.isfile(HISTORY_FILE):
            try:
                readline.read_history_file(HISTORY_FILE)
            except:
                print "%% Unable to read history file %s" % HISTORY_FILE
        clean = False
        logComment("User %s STARTED an interactive session" % mode.username)
        if mode.autoEnable:
            Enable.performEnable(slash)
        if mode.username == "root":
            try:
                mode.username = raw_input("Logging in as common user account. \nPlease provide your user name: ")
            except:
                sys.exit(0)
        while True:
            try:
                mode.setPrompt()
                readline.set_completer(slash.complete)
                if clean:
                    command = raw_input(mode.getPrompt())
                    clean = False
                else:
                    command = raw_input(mode.getPrompt()+readline.get_line_buffer())
                slash.processCommand(command)
            except EOFError, eof:
                if len(mode.exitMethods) > 0:
                    status, output = mode.exitMethods[-1](slash)
                    libUi.userOutput(output, status)
                else:
                    print
                    mode.clearBomConnections()
                    while mode.childProcesses:
                        os.kill(mode.childProcesses.pop(), signal.SIGTERM)
                    readline.write_history_file(HISTORY_FILE)
                    if mode.commentCommands:
                        makeComment()
                    logComment("User %s ENDED an interactive session" % mode.username)
                    sys.exit(0)
                mode.cleanMode(mode.state[-1])
                print
            except exceptions.KeyboardInterrupt, key:
                print
                clean = True

