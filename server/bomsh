#!/opt/python2.5/bin/python

import traceback, StringIO
import exceptions
import sys, os, readline
import PinshCmd, Mode, libUi
from commonUtil import *

class Slash(PinshCmd.PinshCmd):
    def __init__(self, children):
        PinshCmd.PinshCmd.__init__(self, "")
        self.children = children
        self.cmdOwner = 1
        self.helpText = ''

    def processCommand(self, command):
        try:
            if mode.currentState() != Mode.FREE_TEXT:
                noFlag, helpFlag, tokens, comment = libUi.processInput(command)
                if helpFlag: # Process the [?] key first
                    self.findHelp(tokens, 0)
                    #mode.reprompt()
                    return None
                if len(tokens) == 0:
                    return OK, []
                else:
                    status, output = self.run(tokens, noFlag, self)
                    if comment: 
                        makeComment(comment)
            else:
                status, output = self.run(command, self)
            libUi.userOutput(output, status)
            return status, output
        except exceptions.SystemExit, e:
            if mode.commentCommands:
                makeComment()
            sys.exit(0)
        except Exception, e:
            sys.stderr.write("Error detected in %s (%s)." % (file, e))
            e = StringIO.StringIO()
            traceback.print_exc(file=e)
            e.seek(0)
            data = e.read()
            ermsg = ''
            for line in data.split('\n'):
                ermsg += "\n||>>>%s" % line
            sys.stderr.write(ermsg)
            sys.stderr.write("\n")


##########################################################################
## Adding new commands:
## 
## 0. Create a class that extends PinshCmd
## 1. Import the class.
## 2. add the class to the following vector of command or add it to
##    the Configure.py class
    
import Bash, Ping, Telnet, Ssh, Terminal, Exit, Package, Enable, Show
import For, Echo, UpdateClient, Set, Run, PushConfig, Edit, Debug

commands = [Echo.Comment(), Set.Set(), Terminal.Terminal(), Show.Show(), Ping.Ping(), Debug.Debug(),
            Telnet.Telnet(), Ssh.Ssh(), Bash.Bash(), Run.Run(), PushConfig.PushConfig(), Edit.Edit(), Echo.Pause(),
            UpdateClient.UpdateClient(), Exit.Exit(), Enable.Enable(), For.For(), Echo.Echo(), Package.Package()]
slash = Slash(commands)

##########################################################################

mode.auth = USER

# READLINE CONFIGS
readline.parse_and_bind('tab: complete')
readline.parse_and_bind('C-z: "end\n"')
#readline.parse_and_bind('?: "\C-v?\t\d"')
readline.parse_and_bind('set bell-style none')
readline.set_completer_delims(' ')
# Print the message of the day
if len(sys.argv) == 1:
    libUi.motd()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        status = OK
        filename = sys.argv[-1]
        lines = open(filename, 'r').readlines()
        for line in lines:
            cmdStatus, cmdOutput = slash.processCommand(line.strip())
            if status == OK:
                status = cmdStatus
        sys.exit(status)
    else:
        if os.path.isfile(HISTORY_FILE):
            try:
                readline.read_history_file(HISTORY_FILE)
            except:
                print "%% Unable to read history file %s" % HISTORY_FILE
        clean = False
        logComment("User %s STARTED an interactive session" % mode.username)
        if mode.autoEnable:
            Enable.performEnable(slash)
        while True:
            try:
                mode.setPrompt()
                readline.set_completer(slash.complete)
                if clean:
                    command = raw_input(mode.getPrompt())
                    clean = False
                else:
                    command = raw_input(mode.getPrompt()+readline.get_line_buffer())
                slash.processCommand(command)
            except EOFError, eof:
                if len(mode.exitMethods) > 0:
                    status, output = mode.exitMethods[-1](slash)
                    libUi.userOutput(output, status)
                else:
                    print
                    mode.clearBomConnections()
                    readline.write_history_file(HISTORY_FILE)
                    if mode.commentCommands:
                        makeComment()
                    logComment("User %s ENDED an interactive session" % mode.username)
                    sys.exit(0)
                mode.cleanMode(mode.state[-1])
                print
            except exceptions.KeyboardInterrupt, key:
                print
                clean = True
