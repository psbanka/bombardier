#!/opt/python2.5/bin/python

import exceptions
import sys, os, readline
import libUi
from commonUtil import *
from Slash import *

mode.auth = USER

# READLINE CONFIGS
readline.parse_and_bind('tab: complete')
readline.parse_and_bind('C-z: "end\n"')
#readline.parse_and_bind('?: "\C-v?\t\d"')
readline.parse_and_bind('set bell-style none')
readline.set_completer_delims(' ')
# Print the message of the day
if len(sys.argv) == 1:
    libUi.motd()

if __name__ == "__main__":
    if len(sys.argv) > 1:
        status = OK
        filename = sys.argv[-1]
        lines = open(filename, 'r').readlines()
        mode.batch = True
        for line in lines:
            cmdStatus, cmdOutput = slash.processCommand(line.strip())
            if status == OK:
                status = cmdStatus
        sys.exit(status)
    else:
        if os.path.isfile(HISTORY_FILE):
            try:
                readline.read_history_file(HISTORY_FILE)
            except:
                print "%% Unable to read history file %s" % HISTORY_FILE
        clean = False
        logComment("User %s STARTED an interactive session" % mode.username)
        if mode.autoEnable:
            Enable.performEnable(slash)
        if mode.username == "root":
            try:
                mode.username = raw_input("Logging in as common user account. \nPlease provide your user name: ")
            except:
                sys.exit(0)
        while True:
            try:
                mode.setPrompt()
                readline.set_completer(slash.complete)
                if clean:
                    command = raw_input(mode.getPrompt())
                    clean = False
                else:
                    command = raw_input(mode.getPrompt()+readline.get_line_buffer())
                slash.processCommand(command)
            except EOFError, eof:
                if len(mode.exitMethods) > 0:
                    status, output = mode.exitMethods[-1](slash)
                    libUi.userOutput(output, status)
                else:
                    print
                    mode.clearBomConnections()
                    readline.write_history_file(HISTORY_FILE)
                    if mode.commentCommands:
                        makeComment()
                    logComment("User %s ENDED an interactive session" % mode.username)
                    sys.exit(0)
                mode.cleanMode(mode.state[-1])
                print
            except exceptions.KeyboardInterrupt, key:
                print
                clean = True
