#!/usr/bin/env python

import os, sys
sys.path.append('.')
from bombardier_core.static_data import OK, FAIL
from bombardier_core.Logger import Logger

HISTORY_FILE = "%s/.bomsh_history" % os.environ['HOME']
LOG_PATH = "%s/.bomsh_log" % os.environ['HOME']

def try_import(module):
    try:
        exec("import %s" % module)
    except ImportError:
        return FAIL
    return OK

def test_modules():
    missing_modules = []
    for module in ["yaml", "syck"]:
        if try_import(module) == FAIL:
            missing_modules.append(module)
    if missing_modules:
        print " %% ERROR: This system does not have the necessary Python libraries."
        print " %%%% You are missing these modules: %s" % ','.join(missing_modules)
        print
        sys.exit(1)


test_modules()
import syck
import exceptions
import sys, os, readline, signal
import bombardier_server.cli.libUi as libUi
import bombardier_server.cli.Slash as Slash
from bombardier_server.cli.SystemStateSingleton import SystemState
import optparse

# READLINE CONFIGS
readline.parse_and_bind('tab: complete')
readline.parse_and_bind('C-z: "end\n"')
#readline.parse_and_bind('?: "\C-v?\t\d"')
readline.parse_and_bind('set bell-style none')
readline.set_completer_delims(' ')

# DEPRICATED:
def run_scripts(scripts):
    status = OK
    file_name = scripts[0]
    lines = open(file_name, 'r').readlines()
    system_state.batch = True
    for line in lines:
        cmd_status, cmd_output = slash.process_command(line.strip())
        if status == OK:
            status = cmd_status
    return status

def main_loop(system_state, slash):
    clean = False
    while True:
        try:
            system_state.set_prompt()
            readline.set_completer(slash.complete)
            if clean:
                command = raw_input(system_state.get_prompt())
                clean = False
            else:
                command = raw_input(system_state.get_prompt() + readline.get_line_buffer())
            slash.process_command(command)
        except EOFError, eof:
            libUi.info("cleaning up")
            url = "json/machine/cleanup"
            data = system_state.cnm_connector.service_yaml_request(url, post_data={})
            if len(system_state.exit_methods) > 0:
                status, output = system_state.exit_methods[-1](slash)
                libUi.user_output(output, status)
            else:
                print
                while system_state.child_processes:
                    os.kill(system_state.child_processes.pop(), signal.SIGTERM)
                readline.write_history_file(HISTORY_FILE)
                if system_state.comment_commands:
                    makeComment() # MISSING
                sys.exit(0)
            system_state.clean_mode(system_state.state[-1])
            print
        except exceptions.KeyboardInterrupt, key:
            print
            clean = True

if __name__ == "__main__":
    logger = Logger('bombardier_cli', LOG_PATH)

    system_state = SystemState()
    system_state.load_config()

    parser = optparse.OptionParser("usage: %prog -u user-name <bomsh-script>")
    parser.add_option("-u", "--user", dest="user",
                      help="set the username associated with this session")
    (options, scripts) = parser.parse_args()
    username = None
    if options.user:
        username = options.user

    libUi.login(username, logger)
    slash = Slash.Slash(Slash.commands)

    if scripts:
        status = run_scripts(scripts)
        sys.exit(status)
    libUi.motd(slash.fp_out)
    if os.path.isfile(HISTORY_FILE):
        try:
            readline.read_history_file(HISTORY_FILE)
        except:
            print "%% Unable to read history file %s" % HISTORY_FILE
    main_loop(system_state, slash)
